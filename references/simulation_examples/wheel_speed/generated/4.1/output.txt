Below is the comprehensive report that explains the simulation, its functional steps and theoretical basis, and how each step is implemented in the Python/Simulink code.

──────────────────────────────
1. What is the Simulation About?

The simulation is designed to analyze wheel dynamics during vehicle braking by modeling the relationship between wheel angular speed and vehicle speed to compute the slip ratio. In physical terms, the simulation captures the interplay between hydraulic lag (brake pressure dynamics), tire torque, frictional forces on the wheel, and the second‐order dynamics of the wheel. The objective is to obtain critical outputs—namely, brake pressure (Bp), wheel acceleration (Wa), and wheel speed (WheelSpeed)—which are used for control system studies and performance evaluation under braking conditions. By calculating the slip from the difference between the vehicle’s effective speed (derived from vehicle linear speed converted to angular velocity) and the measured wheel speed, the model seeks to optimize tire adhesion and minimize stopping distance. This is particularly important in applications such as anti-lock braking systems (ABS).

──────────────────────────────
2. What are the Main Simulation Steps?

The simulation is broken down into the following functional modules or stages (described from a system-level perspective, independent of the coding details):

A. Input Stimuli Acquisition  
 • Two separate input ports provide signals: one for the “Controller out” (representing the measured or commanded hydraulic input) and another for “Tire Torque” (representing the external torque disturbances acting on the wheel).

B. Hydraulic Dynamic Response  
 • The “Hydraulic Lag” block, implemented using a continuous transfer function, represents the lag between the hydraulic input and the development of brake pressure.  
 • The output from the hydraulic lag feeds into the brake pressure integrator to obtain a smooth, integrated brake pressure signal.

C. Force and Torque Calculation  
 • The brake pressure output is scaled by the “Force and torque” gain block. This reflects the multiplication of the brake pressure by vehicle-specific parameters to calculate the friction force acting on the tire.  
 • A summing operation then combines the effect of the computed friction force (from brake pressure) with the delayed tire torque signal (provided from the “Unit Delay” block).

D. Wheel Dynamics  
 • The combined force/torque signal is passed through an “Inverse I” gain to represent the inverse inertia (I⁻¹) of the wheel, thereby converting the net force or torque into an angular acceleration effect.  
 • The resulting signal serves as the input to a “Second-Order Integrator” that models the wheel dynamics over time by integrating the input twice (to yield both wheel speed and acceleration).

E. Output Generation  
 • Finally, the simulation uses Out1 blocks to capture and display the key outputs: brake pressure (Bp), wheel dynamic acceleration (Wa), and wheel speed (WheelSpeed).

──────────────────────────────
3. What Theoretical Knowledge and Mathematical Modeling Are Involved in Each Step?

A. Input Stimuli Acquisition  
 • The input blocks (In1) simply serve as signal sources. In the context of simulation, they are essential for initiating the dynamic response. Although no physical model is embedded at this stage, the proper specification of input ports ensures that signals are available for further dynamic transformation.

B. Hydraulic Dynamic Response  
 • The “Hydraulic Lag” block employs a continuous transfer function. The transfer function mathematically represents the relationship between an input (controller output) and the output (brake pressure) in Laplace domain using numerator and denominator coefficients. This is based on control theory where first-order dynamics (or higher order if extended) govern the system response.
 • The brake pressure integrator is based on the ordinary differential equation: dx/dt = u(t) with an initial condition x₀, which is intrinsic to the physical integration of a signal over time.

C. Force and Torque Calculation  
 • The “Force and torque” gain block mathematically scales the brake pressure, adhering to principles such as converting pressure to force (F = pressure × area) when factoring friction.  
 • The summing block is based on algebraic addition/subtraction of signals. The underlying concept is that the net force/torque is the algebraic sum of all contributing effects (in this case, braking force and tire torque from a delayed sample).

D. Wheel Dynamics  
 • The inverse inertia gain (“Inverse I”) block reflects the relationship between net torque and angular acceleration (Newton’s second law for rotation: τ = Iα). Scaling by the inverse of the inertia (I⁻¹) mathematically gives α = I⁻¹τ.
 • The “Second-Order Integrator” block implements a second-order ordinary differential equation (d²ω/dt² = u) to capture the dynamics of the wheel. The integration process yields both the wheel’s angular speed and its rate of change (acceleration). These concepts are based on system dynamics and mechanical vibration theory.

E. Output Generation  
 • The output blocks (Out1) serve to relay the computed state variables (brake pressure, wheel acceleration, and wheel speed) outside the simulation. No additional mathematical modeling occurs here, but the correct mapping of simulation states to outputs is essential for analysis and validation.

──────────────────────────────
4. How Is It Implemented in Code?

The simulation is set up using a MATLAB Engine API to create and assemble the Simulink model. The code is organized in steps matching the simulation stages:

A. Setting up Input Blocks
 The code creates two In1 blocks to serve as inputs:
  • “Controller out” block (configured with Port “1”) feeds the hydraulic control signal.
  • “Tire Torque” block (configured with Port “2”) feeds in the tire torque disturbance.

 Code excerpt:
  import matlab.engine
  …
  eng.add_block('simulink/Commonly Used Blocks/In1', model_name + '/Controller out', 'MakeNameUnique', 'on', nargout=0)
  eng.set_param(model_name + '/Controller out', 'Port', '1', nargout=0)
  eng.add_block('simulink/Commonly Used Blocks/In1', model_name + '/Tire Torque', 'MakeNameUnique', 'on', nargout=0)
  eng.set_param(model_name + '/Tire Torque', 'Port', '2', nargout=0)

B. Implementing Hydraulic Dynamics
 The “Hydraulic Lag” is implemented as a Transfer Fcn block to represent the hydraulic dynamics. Next, the “Brake pressure” is obtained by feeding the hydraulic lag output into an Integrator, capturing the accumulation of the pressure over time.
 
 Code excerpt:
  eng.add_block('simulink/Continuous/Transfer Fcn', model_name + '/Hydraulic Lag', 'MakeNameUnique', 'on', nargout=0)
  eng.add_block('simulink/Commonly Used Blocks/Integrator', model_name + '/Brake pressure', 'MakeNameUnique', 'on', nargout=0)
  eng.add_line(model_name, 'Controller out/1', 'Hydraulic Lag/1', nargout=0)
  eng.add_line(model_name, 'Hydraulic Lag/1', 'Brake pressure/1', nargout=0)

C. Force and Torque Calculation
 After obtaining the integrated brake pressure, the “Force and torque” gain block multiplies this signal, scaling it to represent the appropriate force. The summing block then combines this result with the delayed tire torque (arranged using a Unit Delay block) to calculate the net force/torque. The Unit Delay ensures that tire torque is appropriately sampled.
 
 Code excerpt:
  eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Force and torque', 'MakeNameUnique', 'on', nargout=0)
  eng.add_block('simulink/Commonly Used Blocks/Sum', model_name + '/Sum', 'MakeNameUnique', 'on', nargout=0)
  eng.set_param(model_name + '/Sum', 'Inputs', '+-', nargout=0)
  eng.add_block('simulink/Discrete/Unit Delay', model_name + '/Unit Delay', 'MakeNameUnique', 'on', nargout=0)
  eng.add_line(model_name, 'Brake pressure/1', 'Force and torque/1', nargout=0)
  eng.add_line(model_name, 'Force and torque/1', 'Sum/2', nargout=0)
  eng.add_line(model_name, 'Tire Torque/1', 'Unit Delay/1', nargout=0)
  eng.add_line(model_name, 'Unit Delay/1', 'Sum/1', nargout=0)

D. Modeling Wheel Dynamics
 The net force/torque (output of the Sum block) is then scaled by the “Inverse I” gain block to simulate the inverse inertia (I⁻¹) effect that converts torque to angular acceleration. The adjusted signal is fed into the “Wheel Speed” block, which is a Second-Order Integrator that produces the wheel’s angular speed and acceleration.
 
 Code excerpt:
  eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Inverse I', 'MakeNameUnique', 'on', nargout=0)
  eng.add_block('simulink/Continuous/Integrator, Second-Order', model_name + '/Wheel Speed', 'MakeNameUnique', 'on', nargout=0)
  eng.add_line(model_name, 'Sum/1', 'Inverse I/1', nargout=0)
  eng.add_line(model_name, 'Inverse I/1', 'Wheel Speed/1', nargout=0)

E. Output Generation and Final Setup
 The simulation outputs are then connected to three Out1 blocks. Each Out1 block is assigned a specific port corresponding to its physical measurement:
  • “Bp” for brake pressure (Port “1”)  
  • “Wa” for wheel acceleration (Port “2”), derived from the second output of the second-order integrator  
  • “WheelSpeed” for wheel speed (Port “3”), from the primary output of the second-order integrator.
 
 Code excerpt:
  eng.add_block('simulink/Commonly Used Blocks/Out1', model_name + '/Bp', 'MakeNameUnique', 'on', nargout=0)
  eng.set_param(model_name + '/Bp', 'Port', '1', nargout=0)
  eng.add_block('simulink/Commonly Used Blocks/Out1', model_name + '/Wa', 'MakeNameUnique', 'on', nargout=0)
  eng.set_param(model_name + '/Wa', 'Port', '2', nargout=0)
  eng.add_block('simulink/Commonly Used Blocks/Out1', model_name + '/WheelSpeed', 'MakeNameUnique', 'on', nargout=0)
  eng.set_param(model_name + '/WheelSpeed', 'Port', '3', nargout=0)
  …
  eng.add_line(model_name, 'Wheel Speed/1', 'WheelSpeed/1', nargout=0)
  eng.add_line(model_name, 'Wheel Speed/2', 'Wa/1', nargout=0)
  eng.add_line(model_name, 'Brake pressure/1', 'Bp/1', nargout=0)

Finally, the code uses an arrangement command to organize the blocks, saves the system, and prepares it for simulation. This direct correspondence between simulation theory and code illustrates how the different mathematical dynamics (transfer functions, integration, scaling, summation) are literally “wired up” using Simulink blocks and managed via Python scripting.

──────────────────────────────
Conclusion

This report has detailed the simulation’s purpose (wheel and braking dynamics under slip conditions), the modular breakdown of the simulation process from signal input through hydraulic dynamics, force computation, and dynamic integration of wheel motion, as well as the underlying mathematical models (control theory, dynamics, signal flow) within each step. The provided code excerpts demonstrate how each functional block is instantiated and interconnected using Simulink’s API via MATLAB Engine, ensuring that theoretical concepts are faithfully implemented in the simulation architecture.

