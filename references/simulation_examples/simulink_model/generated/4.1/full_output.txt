[Investigator] sum 1 (Sum)  
Gain 1 (Gain)  
Discrete-Time Integrator 1 (Discrete-Time Integrator)  
Gain 2 (Gain)  
Mux 1 (Mux)  
Gain 3 (Gain)  
Integrator 1 (Integrator)  
Gain 4 (Gain)  
sum 2 (Sum)  
In1 (In1)  
Out1 (Out1)  

{
  "request_blocks": ["Sum", "Gain", "Discrete-Time Integrator", "Mux", "Integrator", "In1", "Out1"]
}
[Investigator] In1 (In1) 1 <-> sum 1 (Sum) 1 (`Inputs` = `+-`)  
sum 1 (Sum) 1 (`Inputs` = `+-`) <-> Gain 1 (Gain) 1  
sum 1 (Sum) 1 (`Inputs` = `+-`) <-> Discrete-Time Integrator 1 (Discrete-Time Integrator) 1  
Discrete-Time Integrator 1 (Discrete-Time Integrator) 1 <-> Gain 2 (Gain) 1  
Gain 1 (Gain) 1 <-> sum 2 (Sum) 1 (`Inputs` = `++-`)  
Gain 2 (Gain) 1 <-> sum 2 (Sum) 2 (`Inputs` = `++-`)  
sum 2 (Sum) 1 (`Inputs` = `++-`) <-> Gain 3 (Gain) 1  
Gain 3 (Gain) 1 <-> Integrator 1 (Integrator) 1  
Integrator 1 (Integrator) 1 <-> Gain 4 (Gain) 1  
Gain 4 (Gain) 1 <-> sum 2 (Sum) 3 (`Inputs` = `++-`)  
Integrator 1 (Integrator) 1 <-> Out1 (Out1) 1  
Integrator 1 (Integrator) 1 <-> sum 1 (Sum) 2 (`Inputs` = `+-`)
[Unit_test_reviewer] Below is the review report:

1. Existence of block list:
 • The Investigator’s list of blocks (sum 1, Gain 1, Discrete‐Time Integrator 1, Gain 2, Mux 1, Gain 3, Integrator 1, Gain 4, sum 2, In1, Out1) is present, and the names match (with instance numbers) those in the provided simulation blocks description.

2. Extra Blocks:
 • The Investigator’s list includes “Mux 1 (Mux)”. However, none of the connection lines refer to “Mux 1”. This block is extra (unused) in the connection description.

3. Formatting of Block Name:
 • All block names are given without the special symbol “/”. The naming follows the required format.

4. Formatting of Connection Description:
 • Each connection line uses the required pattern:
  BlockName (BlockType) Port [optional parameter setting] <-> BlockName (BlockType) Port [optional parameter setting].
 • The parameter expressions (e.g., (`Inputs` = `+-`)) appear only when needed and are placed on the proper side.
 • There is no instance of the incorrect formatting of block name and block type (e.g. including extra text before the block name).

5. Validate Parameter Settings in Connections:
 • For the Sum blocks, the parameter setting string (e.g. “`+-`” for sum 1 and “`++-`” for sum 2) correctly indicates the number of input ports expected.
 • All other blocks (Discrete‐Time Integrator, Integrator) appear to be used with default settings, and their connection ports are referenced correctly.

6. Detect Duplicate Connections:
 • Every dedicated input port (with the exception of Electrical Reference or Solver Configuration – which are not in use here) is used only once.
 • There are no duplicate connections to the same input port (each port is uniquely used as dictated by its parameter settings).

7. Validate Block Connection Types:
 • All connections are from an output port (left side) to an input port (right side). No block that has only output or only input is inappropriately connected to another block.
 • The block types used (In1, Sum, Gain, Integrators, Out1) have been used in accordance with the simulation description.

8. Verify Complete Port Connections:
 • For each block that is used in the connection description, every expected port appears to have a connection. For example, each Sum block’s input ports are connected as specified by its “Inputs” parameter.
 • Note, however, that “Mux 1 (Mux)” (which is listed among the blocks used) does not appear in any connection. This leaves Mux 1’s ports entirely unconnected.

Summary of Findings:
• The sole issue is that “Mux 1 (Mux)” is extra – it is present in the blocks list but does not appear anywhere in the connection description. This inconsistency violates the requirement that each identified block should have its ports connected.

Based on the above review:

{
  "Investigator_unit_test_pass": False
}
[Investigator] sum 1 (Sum)  
Gain 1 (Gain)  
Discrete-Time Integrator 1 (Discrete-Time Integrator)  
Gain 2 (Gain)  
Gain 3 (Gain)  
Integrator 1 (Integrator)  
Gain 4 (Gain)  
sum 2 (Sum)  
In1 (In1)  
Out1 (Out1)  

{
  "request_blocks": ["Sum", "Gain", "Discrete-Time Integrator", "Integrator", "In1", "Out1"]
}
[Investigator] In1 (In1) 1 <-> sum 1 (Sum) 1 (`Inputs` = `+-`)  
sum 1 (Sum) 1 (`Inputs` = `+-`) <-> Gain 1 (Gain) 1  
sum 1 (Sum) 1 (`Inputs` = `+-`) <-> Discrete-Time Integrator 1 (Discrete-Time Integrator) 1  
Discrete-Time Integrator 1 (Discrete-Time Integrator) 1 <-> Gain 2 (Gain) 1  
Gain 1 (Gain) 1 <-> Mux 1 (Mux) 1 (`Inputs` = `2`)  
Gain 2 (Gain) 1 <-> Mux 1 (Mux) 2 (`Inputs` = `2`)  
Mux 1 (Mux) 1 <-> sum 2 (Sum) 1 (`Inputs` = `++-`)  
sum 2 (Sum) 1 (`Inputs` = `++-`) <-> Gain 3 (Gain) 1  
Gain 3 (Gain) 1 <-> Integrator 1 (Integrator) 1  
Integrator 1 (Integrator) 1 <-> Gain 4 (Gain) 1  
Gain 4 (Gain) 1 <-> sum 2 (Sum) 3 (`Inputs` = `++-`)  
Integrator 1 (Integrator) 1 <-> Out1 (Out1) 1  
Integrator 1 (Integrator) 1 <-> sum 1 (Sum) 2 (`Inputs` = `+-`)
[Unit_test_reviewer] Below is the review report:

1. Existence of block list:  
 • The provided list of blocks in the Investigator’s simulation information is present (sum 1, Gain 1, Discrete-Time Integrator 1, Gain 2, Gain 3, Integrator 1, Gain 4, sum 2, In1, Out1). However, the connection description introduces a block “Mux 1 (Mux)” that is not included in this block list.

2. Extra Blocks:  
 • “Mux 1 (Mux)” appears in the connections but is not present in the “blocks used in the simulation” list. This is an extra block that should not be present.

3. Formatting of block name:  
 • None of the block names include the special symbol “/”. All block names follow the expected format.

4. Formatting of connection description:  
 • All connections follow the prescribed format (i.e., BlockName (BlockType) Port followed by an optional parameter setting, with output port on the left and input port on the right). The formatting (including the optional parameter strings such as (`Inputs` = `+-`), (`Inputs` = `++-`), or (`Inputs` = `2`)) is consistent with the requirements.

5. Validate Parameter Settings in Connections:  
 • For Sum blocks, the parameter settings “`+-`” (for sum 1) and “`++-`” (for sum 2) correctly indicate the number of expected input ports (2 and 3, respectively).  
 • The connection to “Mux 1 (Mux)” uses a parameter setting of (`Inputs` = `2`), which would be valid if the block were allowed; however, note that this block is extra.  
 • Other blocks use their default port connections, and the settings match the simulation blocks description.

6. Detect Duplicate Connections:  
 • No single dedicated input port appears to be connected more than once (with the allowed exceptions). There are no duplicate connections detected.

7. Validate Block Connection Types:  
 • Each connection is from an output port (left side) to an input port (right side). No block is connected to another block that only has output, nor is any block that only has input connected to another block improperly.

8. Verify Complete Port Connections:  
 • For sum 1 (with parameter `+-`), both input ports are connected.  
 • For sum 2 (with parameter `++-`), only input ports 1 and 3 are connected. Input port 2 is left unconnected, which violates the requirement that every input (and output) port should have a connection.  
 • All other blocks have their respective ports connected appropriately.

Summary of Findings:  
• An extra block (“Mux 1 (Mux)”) is present in the connection description but not in the blocks used list.  
• The Sum block instance “sum 2 (Sum)” has an incomplete connection because its second input port (as dictated by its parameter setting “++-”) is not connected.  

Based on the above review:

{
  "Investigator_unit_test_pass": False
}
[Investigator] sum 1 (Sum)  
Gain 1 (Gain)  
Discrete-Time Integrator 1 (Discrete-Time Integrator)  
Gain 2 (Gain)  
Gain 3 (Gain)  
Integrator 1 (Integrator)  
Gain 4 (Gain)  
sum 2 (Sum)  
In1 (In1)  
Out1 (Out1)  

{
  "request_blocks": ["Sum", "Gain", "Discrete-Time Integrator", "Integrator", "In1", "Out1"]
}
[Investigator] In1 (In1) 1 <-> sum 1 (Sum) 1 (`Inputs` = `+-`)  
Integrator 1 (Integrator) 1 <-> sum 1 (Sum) 2 (`Inputs` = `+-`)  
sum 1 (Sum) 1 (`Inputs` = `+-`) <-> Gain 1 (Gain) 1  
sum 1 (Sum) 1 (`Inputs` = `+-`) <-> Discrete-Time Integrator 1 (Discrete-Time Integrator) 1  
Gain 1 (Gain) 1 <-> sum 2 (Sum) 1 (`Inputs` = `++-`)  
Gain 2 (Gain) 1 <-> sum 2 (Sum) 2 (`Inputs` = `++-`)  
Discrete-Time Integrator 1 (Discrete-Time Integrator) 1 <-> Gain 2 (Gain) 1  
sum 2 (Sum) 1 (`Inputs` = `++-`) <-> Gain 3 (Gain) 1  
Gain 3 (Gain) 1 <-> Integrator 1 (Integrator) 1  
Integrator 1 (Integrator) 1 <-> Gain 4 (Gain) 1  
Gain 4 (Gain) 1 <-> sum 2 (Sum) 3 (`Inputs` = `++-`)  
Integrator 1 (Integrator) 1 <-> Out1 (Out1) 1
[Unit_test_reviewer] Below is the review report:

1. Existence of block list:  
 • The block list provided (“sum 1 (Sum)”, “Gain 1 (Gain)”, “Discrete-Time Integrator 1 (Discrete-Time Integrator)”, “Gain 2 (Gain)”, “Gain 3 (Gain)”, “Integrator 1 (Integrator)”, “Gain 4 (Gain)”, “sum 2 (Sum)”, “In1 (In1)”, “Out1 (Out1)”) exactly matches the requested blocks.

2. Extra Blocks:  
 • All blocks listed in the “blocks used in the simulation” appear in the connections description. No extra blocks are present.

3. Formatting of block name:  
 • None of the block names include the forbidden “/” symbol. All block names use the correct format.

4. Formatting of connection description:  
 • Each connection line is formatted as specified. For example, the lines follow the pattern:  
  BlockName (BlockType) Port [optional parameter setting] <-> BlockName (BlockType) Port [optional parameter setting].  
 • The optional parameter strings (like (`Inputs` = `+-`) or (`Inputs` = `++-`)) are used only when needed and clearly shown.

5. Validate Parameter Settings in Connections:  
 • For “sum 1” the parameter setting is “`+-`”, which implies two input ports. Its two input connections are to input ports numbered 1 and 2 (from In1 and Integrator 1, respectively).  
 • For “sum 2” the parameter setting “`++-`” indicates three input ports; they are connected respectively from Gain 1 (port 1), Gain 2 (port 2), and Gain 4 (port 3).  
 • Other blocks (Discrete-Time Integrator, Integrator, Gain, In1, Out1) follow the expected port assignments per their descriptions.

6. Detect Duplicate Connections:  
 • No dedicated input port is connected more than once (each block’s input port is used only once, except for acceptable fan-out from outputs).  
 • There are no duplicate connections.

7. Validate Block Connection Types:  
 • All connections follow the proper output-to-input direction. No block that has only output is connected to another block that only has output, nor is an input-only block used as a source.  
 • The connection directions match the simulation blocks’ port roles.

8. Verify Complete Port Connections:  
 • For each block, all required input and output ports are connected. For example, “sum 1” (with setting `+-`) has its two input ports fully connected, and “sum 2” (with setting `++-`) has all three input ports connected.  
 • All other blocks (Gain, Discrete-Time Integrator, Integrator, In1, Out1) also have their designated ports connected.

No inconsistencies or errors have been detected.

{
  "Investigator_unit_test_pass": True
}
[Block_builder] import sys
sys.path.append('/usr/local/lib/python3.10/dist-packages/matlabengine-24.2-py3.10.egg')
import matlab.engine

eng = matlab.engine.start_matlab()

model_name = 'MySimModel'
eng.new_system(model_name, nargout=0)
eng.open_system(model_name, nargout=0)

# Add blocks to the model

# Add In1 block with Port parameter set to "1"
eng.add_block('simulink/Commonly Used Blocks/In1', model_name + '/In1', 'Port', '1', nargout=0)

# Add sum 1 block with Inputs parameter set to "+-"
eng.add_block('simulink/Commonly Used Blocks/Sum', model_name + '/sum 1', 'Inputs', '+-', nargout=0)

# Add Gain 1 block
eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Gain 1', nargout=0)

# Add Discrete-Time Integrator 1 block
eng.add_block('simulink/Commonly Used Blocks/Discrete-Time Integrator', model_name + '/Discrete-Time Integrator 1', nargout=0)

# Add Gain 2 block
eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Gain 2', nargout=0)

# Add Gain 3 block
eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Gain 3', nargout=0)

# Add Integrator 1 block
eng.add_block('simulink/Commonly Used Blocks/Integrator', model_name + '/Integrator 1', nargout=0)

# Add Gain 4 block
eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Gain 4', nargout=0)

# Add sum 2 block with Inputs parameter set to "++-"
eng.add_block('simulink/Commonly Used Blocks/Sum', model_name + '/sum 2', 'Inputs', '++-', nargout=0)

# Add Out1 block with Port parameter set to "1"
eng.add_block('simulink/Commonly Used Blocks/Out1', model_name + '/Out1', 'Port', '1', nargout=0)

# Add connections between blocks

# In1 (In1) port 1 to sum 1 (Sum) port 1
eng.add_line(model_name, 'In1/1', 'sum 1/1', nargout=0)

# Integrator 1 (Integrator) port 1 to sum 1 (Sum) port 2
eng.add_line(model_name, 'Integrator 1/1', 'sum 1/2', nargout=0)

# sum 1 (Sum) port 1 to Gain 1 (Gain) port 1
eng.add_line(model_name, 'sum 1/1', 'Gain 1/1', nargout=0)

# sum 1 (Sum) port 1 to Discrete-Time Integrator 1 (Discrete-Time Integrator) port 1
eng.add_line(model_name, 'sum 1/1', 'Discrete-Time Integrator 1/1', nargout=0)

# Gain 1 (Gain) port 1 to sum 2 (Sum) port 1
eng.add_line(model_name, 'Gain 1/1', 'sum 2/1', nargout=0)

# Gain 2 (Gain) port 1 to sum 2 (Sum) port 2
eng.add_line(model_name, 'Gain 2/1', 'sum 2/2', nargout=0)

# Discrete-Time Integrator 1 (Discrete-Time Integrator) port 1 to Gain 2 (Gain) port 1
eng.add_line(model_name, 'Discrete-Time Integrator 1/1', 'Gain 2/1', nargout=0)

# sum 2 (Sum) port 1 to Gain 3 (Gain) port 1
eng.add_line(model_name, 'sum 2/1', 'Gain 3/1', nargout=0)

# Gain 3 (Gain) port 1 to Integrator 1 (Integrator) port 1
eng.add_line(model_name, 'Gain 3/1', 'Integrator 1/1', nargout=0)

# Integrator 1 (Integrator) port 1 to Gain 4 (Gain) port 1
eng.add_line(model_name, 'Integrator 1/1', 'Gain 4/1', nargout=0)

# Gain 4 (Gain) port 1 to sum 2 (Sum) port 3
eng.add_line(model_name, 'Gain 4/1', 'sum 2/3', nargout=0)

# Integrator 1 (Integrator) port 1 to Out1 (Out1) port 1
eng.add_line(model_name, 'Integrator 1/1', 'Out1/1', nargout=0)

eng.Simulink.BlockDiagram.arrangeSystem(model_name, nargout=0)

# Save and open the results
eng.save_system(model_name, model_name + '.slx', nargout=0)
[Report_writer] Below is a comprehensive report that addresses the four key questions by integrating the simulation’s theoretical background, system decomposition, and the corresponding code implementation.

─────────────────────────────  
1. What Is the Simulation About?  
─────────────────────────────  
The simulation models a dynamic system constructed in Simulink by interconnecting basic elements such as summing junctions, gain blocks, integrators (both continuous and discrete), and input/output ports. Its purpose is to replicate a control system that features both continuous and discrete dynamics. In a real-world context, such a simulation could represent a physical process (for example, control of a mechanical or electrical system) where an input signal is combined with state feedback, scaled (via gain blocks), and then integrated over time. The design leverages the feedback mechanism—where integrated outputs are routed back into sums—to investigate system stability, transient behavior, or to design controllers that meet specific performance criteria.  

─────────────────────────────  
2. What Are the Main Simulation Steps?  
─────────────────────────────  
Although the simulation diagram is built using Simulink blocks (and not by direct code-level details), it is conceptually divided into the following functional modules or stages:  

a) Input and Initial Summation  
 • The simulation begins with an external input (provided by the In1 block) that is fed into the first summing junction (sum 1).  
 • Additionally, a feedback signal from the continuous integrator is connected to sum 1 so that the sum block combines the new input with the historical (integrated) system state.

b) Parallel Signal Processing  
 • The output of the first sum block is routed in parallel into two paths. One path passes the signal through a gain block (Gain 1), while the other passes directly into a Discrete-Time Integrator.  
 • The discrete-time integrator computes a numerical integration of the incoming signal using a sampled approach.

c) Feedback Combination  
 • The output from the discrete-time integrator is scaled by another gain block (Gain 2) and then merged with the signal processed by a different gain block (Gain 3) in a second summing block (sum 2).  
 • Simultaneously, a continuous integrator (Integrator 1) processes the output from Gain 3, representing continuous-time accumulation.

d) Final Processing and System Output  
 • The continuous integrator’s output is further scaled by Gain 4 and fed back into sum 2 to complete the inner feedback loop.  
 • Finally, the processed signal from the continuous integrator is output to the Out1 block, representing the final system response.  

─────────────────────────────  
3. What Theoretical Knowledge and Mathematical Modelling Are Involved in Each Step?  
─────────────────────────────  

a) Input and Initial Summation  
 • Theory: Signal Flow and Superposition Principle  
 • Mathematical Modeling: The In1 block introduces u(t) (or u[k] for discrete steps) as the system’s excitation. The Sum block implements linear combination (addition/subtraction) of signals according to specified signs (e.g., “+ -”). This reflects the basic linear superposition principle common in control system analysis.

b) Parallel Signal Processing  
 • Theory: Linear Gain Scaling and Discrete-Time System Dynamics  
 • Mathematical Modeling:  
  – Gain blocks implement multiplication by a constant (k), i.e., y = k · u, which are common in representing proportional control elements.  
  – The Discrete-Time Integrator is based on the difference equation:  
   x[k+1] = x[k] + T · u[k]  
   y[k] = x[k]  
  where T is the sampling interval. This formulation approximates the continuous integral for digital control methods.

c) Feedback Combination  
 • Theory: Feedback Control and Signal Integration  
 • Mathematical Modeling:  
  – The second summing block combines multiple scaled signals. The cumulative effect of the gains and the discrete integrator series yields a composite feedback signal.  
  – Gain blocks (Gain 2 and Gain 3) scale the respective signals feeding into the sum.  
  – The combination reflects a controlled closed-loop system where subsequent scaling and summation modify the control law.

d) Final Processing and System Output  
 • Theory: Continuous-Time Dynamical Systems and Integration  
 • Mathematical Modeling:  
  – The Integrator block implements the continuous-time dynamics defined by the ordinary differential equation (ODE):  
   dx/dt = u(t)  
   y(t) = x(t)  
   x(t₀) = x₀  
  – This captures the continuous accumulation of the controlled input.  
  – The final gain (Gain 4) scales the continuous output before it reenters the summation block, reinforcing the feedback loop while also delivering the final outcome to the Out1 block.

─────────────────────────────  
4. How Is It Implemented in Code?  
─────────────────────────────  
Below we outline the code implementation corresponding to the simulation steps described above. The MATLAB Engine API is used to create a new Simulink model, add the required blocks with their specific parameters, interconnect the blocks, and finally arrange and save the model.

Step-by-Step Implementation:

Step 1: Model Creation and Block Addition – Input and Initial Summation  
 • A new system is created and opened.  
 • The In1 block is added with its Port parameter set to “1”.  
 • The first summing block (sum 1) is added with the parameter “Inputs” set to “+-”, which configures it to subtract (or add inversely) the second input (feedback from the integrator) from the first (external input).

 Code:
  ------------------------------------------------
  import sys
  sys.path.append('/usr/local/lib/python3.10/dist-packages/matlabengine-24.2-py3.10.egg')
  import matlab.engine

  eng = matlab.engine.start_matlab()

  model_name = 'MySimModel'
  eng.new_system(model_name, nargout=0)
  eng.open_system(model_name, nargout=0)

  # Add In1 block with Port parameter set to "1"
  eng.add_block('simulink/Commonly Used Blocks/In1', model_name + '/In1', 'Port', '1', nargout=0)

  # Add sum 1 block with Inputs parameter set to "+-"
  eng.add_block('simulink/Commonly Used Blocks/Sum', model_name + '/sum 1', 'Inputs', '+-', nargout=0)
  ------------------------------------------------

Step 2: Gain and Discrete-Time Integration – Parallel Signal Processing  
 • Gain 1 is added to scale the sum 1 output.  
 • A Discrete-Time Integrator (Discrete-Time Integrator 1) is also added to process the sum output in a sampled manner.  

 Code:
  ------------------------------------------------
  # Add Gain 1 block
  eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Gain 1', nargout=0)

  # Add Discrete-Time Integrator 1 block
  eng.add_block('simulink/Commonly Used Blocks/Discrete-Time Integrator', model_name + '/Discrete-Time Integrator 1', nargout=0)
  ------------------------------------------------

Step 3: Feedback Combination – Integrating Discrete and Continuous Paths  
 • Gain 2 is added to scale the output from the discrete-time integrator before it is fed into the second summing block (sum 2).  
 • Gain 3 is added to another branch from the second summing block, and its output feeds into the continuous-time Integrator (Integrator 1).  
 • Gain 4 then scales the continuous integrator’s signal, which is fed back into sum 2.

 Code:
  ------------------------------------------------
  # Add Gain 2 block
  eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Gain 2', nargout=0)

  # Add Gain 3 block
  eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Gain 3', nargout=0)

  # Add Integrator 1 block
  eng.add_block('simulink/Commonly Used Blocks/Integrator', model_name + '/Integrator 1', nargout=0)

  # Add Gain 4 block
  eng.add_block('simulink/Commonly Used Blocks/Gain', model_name + '/Gain 4', nargout=0)
  ------------------------------------------------

Step 4: Final Summing and Output Assembly  
 • The second summing block (sum 2) is added with the parameter “Inputs” set to “++-”. This block combines signals from Gain 1, Gain 2, and Gain 4.  
 • Finally, the Out1 block is added to output the result from the continuous integrator.

 Code:
  ------------------------------------------------
  # Add sum 2 block with Inputs parameter set to "++-"
  eng.add_block('simulink/Commonly Used Blocks/Sum', model_name + '/sum 2', 'Inputs', '++-', nargout=0)

  # Add Out1 block with Port parameter set to "1"
  eng.add_block('simulink/Commonly Used Blocks/Out1', model_name + '/Out1', 'Port', '1', nargout=0)
  ------------------------------------------------

Step 5: Connecting the Blocks  
 • The code then establishes connections between the blocks by specifying the source and destination ports. For instance, the In1 block is connected to the first input port of sum 1, and the Integrator 1 output is connected both to sum 1 (as feedback) and to Out1.

 Code:
  ------------------------------------------------
  # Connect In1 to sum 1 input port 1
  eng.add_line(model_name, 'In1/1', 'sum 1/1', nargout=0)

  # Connect Integrator 1 to sum 1 input port 2
  eng.add_line(model_name, 'Integrator 1/1', 'sum 1/2', nargout=0)

  # Connect sum 1 to Gain 1 and Discrete-Time Integrator 1
  eng.add_line(model_name, 'sum 1/1', 'Gain 1/1', nargout=0)
  eng.add_line(model_name, 'sum 1/1', 'Discrete-Time Integrator 1/1', nargout=0)

  # Connect Gain 1 to sum 2 input port 1
  eng.add_line(model_name, 'Gain 1/1', 'sum 2/1', nargout=0)

  # Connect Discrete-Time Integrator 1 to Gain 2
  eng.add_line(model_name, 'Discrete-Time Integrator 1/1', 'Gain 2/1', nargout=0)
  eng.add_line(model_name, 'Gain 2/1', 'sum 2/2', nargout=0)

  # Connect sum 2 output to Gain 3, then to Integrator 1
  eng.add_line(model_name, 'sum 2/1', 'Gain 3/1', nargout=0)
  eng.add_line(model_name, 'Gain 3/1', 'Integrator 1/1', nargout=0)

  # Connect Integrator 1 to Gain 4 and then back into sum 2 input port 3
  eng.add_line(model_name, 'Integrator 1/1', 'Gain 4/1', nargout=0)
  eng.add_line(model_name, 'Gain 4/1', 'sum 2/3', nargout=0)

  # Finally, connect Integrator 1 to Out1 for the final output
  eng.add_line(model_name, 'Integrator 1/1', 'Out1/1', nargout=0)
  ------------------------------------------------

Step 6: System Arrangement and Saving  
 • The model is arranged automatically (for visual neatness) and then saved as a Simulink file (.slx).

 Code:
  ------------------------------------------------
  eng.Simulink.BlockDiagram.arrangeSystem(model_name, nargout=0)
  eng.save_system(model_name, model_name + '.slx', nargout=0)
  ------------------------------------------------

─────────────────────────────  
Conclusion  
─────────────────────────────  
This report detailed a simulation designed in Simulink that uses basic blocks to model a system with both continuous and discrete dynamic behavior. The simulation is organized into modules (input/summing, signal scaling, integration, and feedback combination) that reflect underlying theoretical principles in control system analysis and numerical integration. The provided MATLAB Engine code demonstrates how each theoretical stage is directly implemented with corresponding function calls to add and connect blocks, faithfully translating the system’s block diagram into executable simulation code.